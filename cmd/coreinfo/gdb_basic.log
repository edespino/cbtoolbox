

=== Basic Crash Information ===

Current thread information:No threads.


=== Thread Backtraces ===



=== Register State ===

/tmp/gdb_commands_basic_2388195811.txt:15: Error in sourced command file:
The program has no registers now.
(gdb) quit


=== Basic Crash Information ===

Current thread information:No threads.


=== Thread Backtraces ===



=== Register State ===

/tmp/gdb_commands_basic_954735272.txt:15: Error in sourced command file:
The program has no registers now.
(gdb) quit


=== Basic Crash Information ===

Current thread information:  Id   Target Id         Frame 
* 1    LWP 16603         0x00000000004005a4 in ?? ()


=== Thread Backtraces ===


Thread 1 (LWP 16603):
#0  0x00000000004005a4 in ?? ()
No symbol table info available.
#1  0x00007ffffcac85a0 in ?? ()
No symbol table info available.
#2  0x0000000000000000 in ?? ()
No symbol table info available.


=== Register State ===

rax            0x0                 0
rbx            0x0                 0
rcx            0x7f74bfb035a8      140139408930216
rdx            0x7f74bfda7860      140139411699808
rsi            0x123e2a0           19128992
rdi            0x0                 0
rbp            0x7ffffcac84d0      0x7ffffcac84d0
rsp            0x7ffffcac84c0      0x7ffffcac84c0
r8             0x3                 3
r9             0x123e08e           19128462
r10            0x0                 0
r11            0x246               582
r12            0x4004a0            4195488
r13            0x7ffffcac85a0      140737432552864
r14            0x0                 0
r15            0x0                 0
rip            0x4005a4            0x4005a4
eflags         0x10202             [ IF RF ]
cs             0x33                51
ss             0x2b                43
ds             0x0                 0
es             0x0                 0
fs             0x0                 0
gs             0x0                 0
st0            0                   (raw 0x00000000000000000000)
st1            0                   (raw 0x00000000000000000000)
st2            0                   (raw 0x00000000000000000000)
st3            0                   (raw 0x00000000000000000000)
st4            0                   (raw 0x00000000000000000000)
st5            0                   (raw 0x00000000000000000000)
st6            0                   (raw 0x00000000000000000000)
st7            0                   (raw 0x00000000000000000000)
fctrl          0x37f               895
fstat          0x0                 0
ftag           0xffff              65535
fiseg          0x0                 0
fioff          0x0                 0
foseg          0x0                 0
fooff          0x0                 0
fop            0x0                 0
mxcsr          0x1f80              [ IM DM ZM OM UM PM ]
k0             0xe0ee080           235856000
k1             0x10000020          268435488
k2             0x0                 0
k3             0x0                 0
k4             0x0                 0
k5             0x0                 0
k6             0x0                 0
k7             0x0                 0
pkru           0x55555554          1431655764
zmm0           {
  v16_float = {0x0, 0x0, 0x0, 0x0, 0x0 <repeats 12 times>}, 
  v8_double = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, 
  v64_int8 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0xff, 0xff, 0xff, 0x0, 0xff, 0x0 <repeats 49 times>}, 
  v32_int16 = {0x0, 0x0, 0x0, 0x0, 0xff00, 0xffff, 0xff, 0xff, 0x0 <repeats 24 times>}, 
  v16_int32 = {0x0, 0x0, 0xffffff00, 0xff00ff, 0x0 <repeats 12 times>}, 
  v8_int64 = {0x0, 0xff00ffffffff00, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, 
  v4_int128 = {0xff00ffffffff000000000000000000, 0x0, 0x0, 0x0}
}
zmm1           {
  v16_float = {0x0, 0x0, 0x0, 0x0, 0x0 <repeats 12 times>}, 
  v8_double = {0x8000000000000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, 
  v64_int8 = {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0, 0x1, 0x1, 0x1, 0x0, 0x1, 0x0 <repeats 49 times>}, 
  v32_int16 = {0xffff, 0xffff, 0xffff, 0xffff, 0xff, 0x101, 0x1, 0x1, 0x0 <repeats 24 times>}, 
  v16_int32 = {0xffffffff, 0xffffffff, 0x10100ff, 0x10001, 0x0 <repeats 12 times>}, 
  v8_int64 = {0xffffffffffffffff, 0x10001010100ff, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, 
  v4_int128 = {0x10001010100ffffffffffffffffff, 0x0, 0x0, 0x0}
}
zmm2           {
  v16_float = {0x94c00000, 0x0, 0xffffffff, 0xffffffff, 0x0 <repeats 12 times>}, 
  v8_double = {0x0, 0x7fffffffffffffff, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, 
  v64_int8 = {0x4c, 0x49, 0x4e, 0x55, 0x58, 0x5f, 0x32, 0x2e, 0x36, 0x0, 0x5f, 0x5f, 0x76, 0x64, 0x73, 0x6f, 0x0 <repeats 48 times>}, 
  v32_int16 = {0x494c, 0x554e, 0x5f58, 0x2e32, 0x36, 0x5f5f, 0x6476, 0x6f73, 0x0 <repeats 24 times>}, 
  v16_int32 = {0x554e494c, 0x2e325f58, 0x5f5f0036, 0x6f736476, 0x0 <repeats 12 times>}, 
  v8_int64 = {0x2e325f58554e494c, 0x6f7364765f5f0036, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, 
  v4_int128 = {0x6f7364765f5f00362e325f58554e494c, 0x0, 0x0, 0x0}
}
zmm3           {
  v16_float = {0xffffffff, 0xffffffff, 0x0 <repeats 14 times>}, 
  v8_double = {0x7fffffffffffffff, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, 
  v64_int8 = {0x6c, 0x69, 0x62, 0x63, 0x5f, 0x65, 0x61, 0x72, 0x0 <repeats 56 times>}, 
  v32_int16 = {0x696c, 0x6362, 0x655f, 0x7261, 0x0 <repeats 28 times>}, 
  v16_int32 = {0x6362696c, 0x7261655f, 0x0 <repeats 14 times>}, 
  v8_int64 = {0x7261655f6362696c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, 
  v4_int128 = {0x7261655f6362696c, 0x0, 0x0, 0x0}
}
zmm4           {
  v16_float = {0xffffffff, 0x0, 0xffffffff, 0xffffffff, 0x0 <repeats 12 times>}, 
  v8_double = {0x0, 0x7fffffffffffffff, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, 
  v64_int8 = {0x6c, 0x79, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x0, 0x70, 0x70, 0x6f, 0x6c, 0x6c, 0x0, 0x6c, 0x6f, 0x0 <repeats 48 times>}, 
  v32_int16 = {0x796c, 0x695f, 0x696e, 0x74, 0x7070, 0x6c6f, 0x6c, 0x6f6c, 0x0 <repeats 24 times>}, 
  v16_int32 = {0x695f796c, 0x74696e, 0x6c6f7070, 0x6f6c006c, 0x0 <repeats 12 times>}, 
  v8_int64 = {0x74696e695f796c, 0x6f6c006c6c6f7070, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, 
  v4_int128 = {0x6f6c006c6c6f70700074696e695f796c, 0x0, 0x0, 0x0}
}
zmm5           {
  v16_float = {0x0 <repeats 16 times>}, 
  v8_double = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, 
  v64_int8 = {0x0 <repeats 64 times>}, 
  v32_int16 = {0x0 <repeats 32 times>}, 
  v16_int32 = {0x0 <repeats 16 times>}, 
  v8_int64 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, 
  v4_int128 = {0x0, 0x0, 0x0, 0x0}
}
zmm6           {
  v16_float = {0x0 <repeats 16 times>}, 
  v8_double = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, 
  v64_int8 = {0x0 <repeats 64 times>}, 
  v32_int16 = {0x0 <repeats 32 times>}, 
  v16_int32 = {0x0 <repeats 16 times>}, 
  v8_int64 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, 
  v4_int128 = {0x0, 0x0, 0x0, 0x0}
}
zmm7           {
  v16_float = {0x0 <repeats 16 times>}, 
  v8_double = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, 
  v64_int8 = {0x0 <repeats 64 times>}, 
  v32_int16 = {0x0 <repeats 32 times>}, 
  v16_int32 = {0x0 <repeats 16 times>}, 
  v8_int64 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, 
  v4_int128 = {0x0, 0x0, 0x0, 0x0}
}
zmm8           {
  v16_float = {0x0 <repeats 16 times>}, 
  v8_double = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, 
  v64_int8 = {0x0 <repeats 64 times>}, 
  v32_int16 = {0x0 <repeats 32 times>}, 
  v16_int32 = {0x0 <repeats 16 times>}, 
  v8_int64 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, 
  v4_int128 = {0x0, 0x0, 0x0, 0x0}
}
zmm9           {
  v16_float = {0x0 <repeats 16 times>}, 
  v8_double = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, 
  v64_int8 = {0x0 <repeats 64 times>}, 
  v32_int16 = {0x0 <repeats 32 times>}, 
  v16_int32 = {0x0 <repeats 16 times>}, 
  v8_int64 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, 
  v4_int128 = {0x0, 0x0, 0x0, 0x0}
}
zmm10          {
  v16_float = {0x0 <repeats 16 times>}, 
  v8_double = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, 
  v64_int8 = {0x0 <repeats 64 times>}, 
  v32_int16 = {0x0 <repeats 32 times>}, 
  v16_int32 = {0x0 <repeats 16 times>}, 
  v8_int64 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, 
  v4_int128 = {0x0, 0x0, 0x0, 0x0}
}
zmm11          {
  v16_float = {0x0 <repeats 16 times>}, 
  v8_double = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, 
  v64_int8 = {0x0 <repeats 64 times>}, 
  v32_int16 = {0x0 <repeats 32 times>}, 
  v16_int32 = {0x0 <repeats 16 times>}, 
  v8_int64 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, 
  v4_int128 = {0x0, 0x0, 0x0, 0x0}
}
zmm12          {
  v16_float = {0x0 <repeats 16 times>}, 
  v8_double = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, 
  v64_int8 = {0x0 <repeats 64 times>}, 
  v32_int16 = {0x0 <repeats 32 times>}, 
  v16_int32 = {0x0 <repeats 16 times>}, 
  v8_int64 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, 
  v4_int128 = {0x0, 0x0, 0x0, 0x0}
}
zmm13          {
  v16_float = {0x0 <repeats 16 times>}, 
  v8_double = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, 
  v64_int8 = {0x0 <repeats 64 times>}, 
  v32_int16 = {0x0 <repeats 32 times>}, 
  v16_int32 = {0x0 <repeats 16 times>}, 
  v8_int64 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, 
  v4_int128 = {0x0, 0x0, 0x0, 0x0}
}
zmm14          {
  v16_float = {0x0 <repeats 16 times>}, 
  v8_double = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, 
  v64_int8 = {0x0 <repeats 64 times>}, 
  v32_int16 = {0x0 <repeats 32 times>}, 
  v16_int32 = {0x0 <repeats 16 times>}, 
  v8_int64 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, 
  v4_int128 = {0x0, 0x0, 0x0, 0x0}
}
zmm15          {
  v16_float = {0x0 <repeats 16 times>}, 
  v8_double = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, 
  v64_int8 = {0x0 <repeats 64 times>}, 
  v32_int16 = {0x0 <repeats 32 times>}, 
  v16_int32 = {0x0 <repeats 16 times>}, 
  v8_int64 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, 
  v4_int128 = {0x0, 0x0, 0x0, 0x0}
}
zmm16          {
  v16_float = {0x0 <repeats 16 times>}, 
  v8_double = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, 
  v64_int8 = {0x0 <repeats 64 times>}, 
  v32_int16 = {0x0 <repeats 32 times>}, 
  v16_int32 = {0x0 <repeats 16 times>}, 
  v8_int64 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, 
  v4_int128 = {0x0, 0x0, 0x0, 0x0}
}
zmm17          {
  v16_float = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, 
  v8_double = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, 
  v64_int8 = {0x2f <repeats 32 times>, 0x0 <repeats 32 times>}, 
  v32_int16 = {0x2f2f <repeats 16 times>, 0x0 <repeats 16 times>}, 
  v16_int32 = {0x2f2f2f2f, 0x2f2f2f2f, 0x2f2f2f2f, 0x2f2f2f2f, 0x2f2f2f2f, 0x2f2f2f2f, 0x2f2f2f2f, 0x2f2f2f2f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, 
  v8_int64 = {0x2f2f2f2f2f2f2f2f, 0x2f2f2f2f2f2f2f2f, 0x2f2f2f2f2f2f2f2f, 0x2f2f2f2f2f2f2f2f, 0x0, 0x0, 0x0, 0x0}, 
  v4_int128 = {0x2f2f2f2f2f2f2f2f2f2f2f2f2f2f2f2f, 0x2f2f2f2f2f2f2f2f2f2f2f2f2f2f2f2f, 0x0, 0x0}
}
zmm18          {
  v16_float = {0x0 <repeats 16 times>}, 
  v8_double = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, 
  v64_int8 = {0x0 <repeats 64 times>}, 
  v32_int16 = {0x0 <repeats 32 times>}, 
  v16_int32 = {0x0 <repeats 16 times>}, 
  v8_int64 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, 
  v4_int128 = {0x0, 0x0, 0x0, 0x0}
}
zmm19          {
  v16_float = {0xffffffff, 0xffffffff, 0x0, 0x37d1130, 0xd, 0x7d654800, 0x0, 0xffffffff, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, 
  v8_double = {0x7fffffffffffffff, 0x7fffffffffffffff, 0x7fffffffffffffff, 0x7fffffffffffffff, 0x0, 0x0, 0x0, 0x0}, 
  v64_int8 = {0x62, 0x75, 0x69, 0x6c, 0x64, 0x2f, 0x63, 0x72, 0x61, 0x73, 0x68, 0x0, 0x4c, 0x44, 0x5f, 0x4c, 0x49, 0x42, 0x52, 0x41, 0x52, 0x59, 0x5f, 0x50, 0x41, 0x54, 0x48, 0x3d, 0x2f, 0x75, 0x73, 0x72, 0x0 <repeats 32 times>}, 
  v32_int16 = {0x7562, 0x6c69, 0x2f64, 0x7263, 0x7361, 0x68, 0x444c, 0x4c5f, 0x4249, 0x4152, 0x5952, 0x505f, 0x5441, 0x3d48, 0x752f, 0x7273, 0x0 <repeats 16 times>}, 
  v16_int32 = {0x6c697562, 0x72632f64, 0x687361, 0x4c5f444c, 0x41524249, 0x505f5952, 0x3d485441, 0x7273752f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, 
  v8_int64 = {0x72632f646c697562, 0x4c5f444c00687361, 0x505f595241524249, 0x7273752f3d485441, 0x0, 0x0, 0x0, 0x0}, 
  v4_int128 = {0x4c5f444c0068736172632f646c697562, 0x7273752f3d485441505f595241524249, 0x0, 0x0}
}
zmm20          {
  v16_float = {0x0 <repeats 16 times>}, 
  v8_double = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, 
  v64_int8 = {0x0 <repeats 64 times>}, 
  v32_int16 = {0x0 <repeats 32 times>}, 
  v16_int32 = {0x0 <repeats 16 times>}, 
  v8_int64 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, 
  v4_int128 = {0x0, 0x0, 0x0, 0x0}
}
zmm21          {
  v16_float = {0x0 <repeats 16 times>}, 
  v8_double = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, 
  v64_int8 = {0x0 <repeats 64 times>}, 
  v32_int16 = {0x0 <repeats 32 times>}, 
  v16_int32 = {0x0 <repeats 16 times>}, 
  v8_int64 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, 
  v4_int128 = {0x0, 0x0, 0x0, 0x0}
}
zmm22          {
  v16_float = {0x0 <repeats 16 times>}, 
  v8_double = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, 
  v64_int8 = {0x0 <repeats 64 times>}, 
  v32_int16 = {0x0 <repeats 32 times>}, 
  v16_int32 = {0x0 <repeats 16 times>}, 
  v8_int64 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, 
  v4_int128 = {0x0, 0x0, 0x0, 0x0}
}
zmm23          {
  v16_float = {0x0 <repeats 16 times>}, 
  v8_double = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, 
  v64_int8 = {0x0 <repeats 64 times>}, 
  v32_int16 = {0x0 <repeats 32 times>}, 
  v16_int32 = {0x0 <repeats 16 times>}, 
  v8_int64 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, 
  v4_int128 = {0x0, 0x0, 0x0, 0x0}
}
zmm24          {
  v16_float = {0x0 <repeats 16 times>}, 
  v8_double = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, 
  v64_int8 = {0x0 <repeats 64 times>}, 
  v32_int16 = {0x0 <repeats 32 times>}, 
  v16_int32 = {0x0 <repeats 16 times>}, 
  v8_int64 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, 
  v4_int128 = {0x0, 0x0, 0x0, 0x0}
}
zmm25          {
  v16_float = {0x0 <repeats 16 times>}, 
  v8_double = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, 
  v64_int8 = {0x0 <repeats 64 times>}, 
  v32_int16 = {0x0 <repeats 32 times>}, 
  v16_int32 = {0x0 <repeats 16 times>}, 
  v8_int64 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, 
  v4_int128 = {0x0, 0x0, 0x0, 0x0}
}
zmm26          {
  v16_float = {0x0 <repeats 16 times>}, 
  v8_double = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, 
  v64_int8 = {0x0 <repeats 64 times>}, 
  v32_int16 = {0x0 <repeats 32 times>}, 
  v16_int32 = {0x0 <repeats 16 times>}, 
  v8_int64 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, 
  v4_int128 = {0x0, 0x0, 0x0, 0x0}
}
zmm27          {
  v16_float = {0x0 <repeats 16 times>}, 
  v8_double = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, 
  v64_int8 = {0x0 <repeats 64 times>}, 
  v32_int16 = {0x0 <repeats 32 times>}, 
  v16_int32 = {0x0 <repeats 16 times>}, 
  v8_int64 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, 
  v4_int128 = {0x0, 0x0, 0x0, 0x0}
}
zmm28          {
  v16_float = {0x0 <repeats 16 times>}, 
  v8_double = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, 
  v64_int8 = {0x0 <repeats 64 times>}, 
  v32_int16 = {0x0 <repeats 32 times>}, 
  v16_int32 = {0x0 <repeats 16 times>}, 
  v8_int64 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, 
  v4_int128 = {0x0, 0x0, 0x0, 0x0}
}
zmm29          {
  v16_float = {0x0 <repeats 16 times>}, 
  v8_double = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, 
  v64_int8 = {0x0 <repeats 64 times>}, 
  v32_int16 = {0x0 <repeats 32 times>}, 
  v16_int32 = {0x0 <repeats 16 times>}, 
  v8_int64 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, 
  v4_int128 = {0x0, 0x0, 0x0, 0x0}
}
zmm30          {
  v16_float = {0x0 <repeats 16 times>}, 
  v8_double = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, 
  v64_int8 = {0x0 <repeats 64 times>}, 
  v32_int16 = {0x0 <repeats 32 times>}, 
  v16_int32 = {0x0 <repeats 16 times>}, 
  v8_int64 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, 
  v4_int128 = {0x0, 0x0, 0x0, 0x0}
}
zmm31          {
  v16_float = {0x0 <repeats 16 times>}, 
  v8_double = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, 
  v64_int8 = {0x0 <repeats 64 times>}, 
  v32_int16 = {0x0 <repeats 32 times>}, 
  v16_int32 = {0x0 <repeats 16 times>}, 
  v8_int64 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, 
  v4_int128 = {0x0, 0x0, 0x0, 0x0}
}


=== Signal Information ===

$1 = {
  si_signo = 11, 
  si_errno = 0, 
  si_code = 1, 
  _sifields = {
    _pad = {0 <repeats 28 times>}, 
    _kill = {
      si_pid = 0, 
      si_uid = 0
    }, 
    _timer = {
      si_tid = 0, 
      si_overrun = 0, 
      si_sigval = {
        sival_int = 0, 
        sival_ptr = 0x0
      }
    }, 
    _rt = {
      si_pid = 0, 
      si_uid = 0, 
      si_sigval = {
        sival_int = 0, 
        sival_ptr = 0x0
      }
    }, 
    _sigchld = {
      si_pid = 0, 
      si_uid = 0, 
      si_status = 0, 
      si_utime = 0, 
      si_stime = 0
    }, 
    _sigfault = {
      si_addr = 0x0, 
      _addr_lsb = 0, 
      _addr_bnd = {
        _lower = 0x0, 
        _upper = 0x0
      }
    }, 
    _sigpoll = {
      si_band = 0, 
      si_fd = 0
    }
  }
}
$2 = {
  si_addr = 0x0, 
  _addr_lsb = 0, 
  _addr_bnd = {
    _lower = 0x0, 
    _upper = 0x0
  }
}


=== Current Instruction ===

=> 0x4005a4:	movl   $0x2a,(%rax)


=== Memory Mappings ===

Mapped address spaces:

          Start Addr           End Addr       Size     Offset objfile
            0x400000           0x401000     0x1000        0x0 /home/gpadmin/cbtoolbox/build/crash
            0x600000           0x601000     0x1000        0x0 /home/gpadmin/cbtoolbox/build/crash
            0x601000           0x602000     0x1000     0x1000 /home/gpadmin/cbtoolbox/build/crash
      0x7f74bf9d5000     0x7f74bfba2000   0x1cd000        0x0 /usr/lib64/libc-2.28.so
      0x7f74bfba2000     0x7f74bfda1000   0x1ff000   0x1cd000 /usr/lib64/libc-2.28.so
      0x7f74bfda1000     0x7f74bfda5000     0x4000   0x1cc000 /usr/lib64/libc-2.28.so
      0x7f74bfda5000     0x7f74bfda7000     0x2000   0x1d0000 /usr/lib64/libc-2.28.so
      0x7f74bfdab000     0x7f74bfdda000    0x2f000        0x0 /usr/lib64/ld-2.28.so
      0x7f74bffda000     0x7f74bffdb000     0x1000    0x2f000 /usr/lib64/ld-2.28.so
      0x7f74bffdb000     0x7f74bffdd000     0x2000    0x30000 /usr/lib64/ld-2.28.so


=== Frame Information ===

Stack level 0, frame at 0x7ffffcac84c8:
 rip = 0x4005a4; saved rip = 0x7ffffcac85a0
 called by frame at 0x7ffffcac84d0
 Arglist at 0x7ffffcac84b8, args: 
 Locals at 0x7ffffcac84b8, Previous frame's sp is 0x7ffffcac84c8
 Saved registers:
  rip at 0x7ffffcac84c0


=== Shared Libraries ===

No shared libraries loaded at this time.


=== Thread Instructions ===


Thread 1 (LWP 16603):
=> 0x4005a4:	movl   $0x2a,(%rax)


=== Binary Sections ===

Exec file:
    `/usr/local/cloudberry-db-1.6.0/bin/postgres', file type elf64-x86-64.
 [0]     0x00400238->0x00400254 at 0x00000238: .interp ALLOC LOAD READONLY DATA HAS_CONTENTS
 [1]     0x00400254->0x00400274 at 0x00000254: .note.ABI-tag ALLOC LOAD READONLY DATA HAS_CONTENTS
 [2]     0x00400274->0x00400298 at 0x00000274: .note.gnu.build-id ALLOC LOAD READONLY DATA HAS_CONTENTS
 [3]     0x00400298->0x004002f8 at 0x00000298: .gnu.hash ALLOC LOAD READONLY DATA HAS_CONTENTS
 [4]     0x004002f8->0x00400820 at 0x000002f8: .dynsym ALLOC LOAD READONLY DATA HAS_CONTENTS
 [5]     0x00400820->0x00400b2d at 0x00000820: .dynstr ALLOC LOAD READONLY DATA HAS_CONTENTS
 [6]     0x00400b2e->0x00400b9c at 0x00000b2e: .gnu.version ALLOC LOAD READONLY DATA HAS_CONTENTS
 [7]     0x00400ba0->0x00400be0 at 0x00000ba0: .gnu.version_r ALLOC LOAD READONLY DATA HAS_CONTENTS
 [8]     0x00400be0->0x00400cb8 at 0x00000be0: .rela.dyn ALLOC LOAD READONLY DATA HAS_CONTENTS
 [9]     0x00400cb8->0x00400fb8 at 0x00000cb8: .rela.plt ALLOC LOAD READONLY DATA HAS_CONTENTS
 [10]     0x00400fb8->0x00400fd3 at 0x00000fb8: .init ALLOC LOAD READONLY CODE HAS_CONTENTS
 [11]     0x00400fe0->0x004011f0 at 0x00000fe0: .plt ALLOC LOAD READONLY CODE HAS_CONTENTS
 [12]     0x004011f0->0x00401ba5 at 0x000011f0: .text ALLOC LOAD READONLY CODE HAS_CONTENTS
 [13]     0x00401ba8->0x00401bb5 at 0x00001ba8: .fini ALLOC LOAD READONLY CODE HAS_CONTENTS
 [14]     0x00401bb8->0x00402ad8 at 0x00001bb8: .rodata ALLOC LOAD READONLY DATA HAS_CONTENTS
 [15]     0x00402ad8->0x00402b34 at 0x00002ad8: .eh_frame_hdr ALLOC LOAD READONLY DATA HAS_CONTENTS
 [16]     0x00402b38->0x00402cf0 at 0x00002b38: .eh_frame ALLOC LOAD READONLY DATA HAS_CONTENTS
 [17]     0x00602da8->0x00602db0 at 0x00002da8: .init_array ALLOC LOAD DATA HAS_CONTENTS
 [18]     0x00602db0->0x00602db8 at 0x00002db0: .fini_array ALLOC LOAD DATA HAS_CONTENTS
 [19]     0x00602db8->0x00602fb8 at 0x00002db8: .dynamic ALLOC LOAD DATA HAS_CONTENTS
 [20]     0x00602fb8->0x00603000 at 0x00002fb8: .got ALLOC LOAD DATA HAS_CONTENTS
 [21]     0x00603000->0x00603118 at 0x00003000: .got.plt ALLOC LOAD DATA HAS_CONTENTS
 [22]     0x00603118->0x0060311c at 0x00003118: .data ALLOC LOAD DATA HAS_CONTENTS
 [23]     0x00603120->0x00603130 at 0x0000311c: .bss ALLOC
 [24]     0x00000000->0x0000002d at 0x0000311c: .comment READONLY HAS_CONTENTS
 [25]     0x00a03130->0x00a033b4 at 0x0000314c: .gnu.build.attributes READONLY HAS_CONTENTS
Core file:
    `/var/crash/core-crash-11-1001-1001-16603-1735815659', file type elf64-x86-64.
 [0]     0x00000000->0x00003344 at 0x00000468: note0 READONLY HAS_CONTENTS
 [1]     0x00000000->0x000000d8 at 0x000004ec: .reg/16603 HAS_CONTENTS
 [2]     0x00000000->0x000000d8 at 0x000004ec: .reg HAS_CONTENTS
 [3]     0x00000000->0x00000080 at 0x0000067c: .note.linuxcore.siginfo/16603 HAS_CONTENTS
 [4]     0x00000000->0x00000080 at 0x0000067c: .note.linuxcore.siginfo HAS_CONTENTS
 [5]     0x00000000->0x00000150 at 0x00000710: .auxv HAS_CONTENTS
 [6]     0x00000000->0x0000020e at 0x00000874: .note.linuxcore.file/16603 HAS_CONTENTS
 [7]     0x00000000->0x0000020e at 0x00000874: .note.linuxcore.file HAS_CONTENTS
 [8]     0x00000000->0x00000200 at 0x00000a98: .reg2/16603 HAS_CONTENTS
 [9]     0x00000000->0x00000200 at 0x00000a98: .reg2 HAS_CONTENTS
 [10]     0x00000000->0x00002b00 at 0x00000cac: .reg-xstate/16603 HAS_CONTENTS
 [11]     0x00000000->0x00002b00 at 0x00000cac: .reg-xstate HAS_CONTENTS
 [12]     0x00400000->0x00401000 at 0x00004000: load1 ALLOC LOAD READONLY CODE HAS_CONTENTS
 [13]     0x00600000->0x00601000 at 0x00005000: load2 ALLOC LOAD READONLY HAS_CONTENTS
 [14]     0x00601000->0x00602000 at 0x00006000: load3 ALLOC LOAD HAS_CONTENTS
 [15]     0x0123e000->0x0125f000 at 0x00007000: load4 ALLOC LOAD HAS_CONTENTS
 [16]     0x7f74bf9d5000->0x7f74bf9d6000 at 0x00028000: load5a ALLOC LOAD READONLY CODE HAS_CONTENTS
 [17]     0x7f74bf9d6000->0x7f74bfba2000 at 0x00029000: load5b ALLOC READONLY CODE
 [18]     0x7f74bfba2000->0x7f74bfda1000 at 0x00029000: load6 ALLOC READONLY
 [19]     0x7f74bfda1000->0x7f74bfda5000 at 0x00029000: load7 ALLOC LOAD READONLY HAS_CONTENTS
 [20]     0x7f74bfda5000->0x7f74bfda7000 at 0x0002d000: load8 ALLOC LOAD HAS_CONTENTS
 [21]     0x7f74bfda7000->0x7f74bfdab000 at 0x0002f000: load9 ALLOC LOAD HAS_CONTENTS
 [22]     0x7f74bfdab000->0x7f74bfdac000 at 0x00033000: load10a ALLOC LOAD READONLY CODE HAS_CONTENTS
 [23]     0x7f74bfdac000->0x7f74bfdda000 at 0x00034000: load10b ALLOC READONLY CODE
 [24]     0x7f74bffcf000->0x7f74bffd2000 at 0x00034000: load11 ALLOC LOAD HAS_CONTENTS
 [25]     0x7f74bffd8000->0x7f74bffda000 at 0x00037000: load12 ALLOC LOAD HAS_CONTENTS
 [26]     0x7f74bffda000->0x7f74bffdb000 at 0x00039000: load13 ALLOC LOAD READONLY HAS_CONTENTS
 [27]     0x7f74bffdb000->0x7f74bffdd000 at 0x0003a000: load14 ALLOC LOAD HAS_CONTENTS
 [28]     0x7ffffcaa8000->0x7ffffcac9000 at 0x0003c000: load15 ALLOC LOAD HAS_CONTENTS
 [29]     0x7ffffcb70000->0x7ffffcb74000 at 0x0005d000: load16 ALLOC LOAD READONLY HAS_CONTENTS
 [30]     0x7ffffcb74000->0x7ffffcb76000 at 0x00061000: load17 ALLOC LOAD READONLY CODE HAS_CONTENTS
 [31]     0xffffffffff600000->0xffffffffff601000 at 0x00063000: load18 ALLOC LOAD READONLY CODE HAS_CONTENTS
